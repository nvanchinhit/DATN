'use client';

import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import Sidebardoctor from '@/components/layout/Sidebardoctor';

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho r√µ r√†ng
interface Doctor {
  id: number;
  name: string;
  email: string;
  account_status: 'active' | 'pending' | 'inactive';
  // Th√™m c√°c thu·ªôc t√≠nh kh√°c c·ªßa doctor n·∫øu c·∫ßn
}

interface PatientAppointment {
  appointment_id: number;
  patient_name: string;
  reason: string;
  customer_id: number;
  doctor_id: number;
  medical_record_id: number | null;
  diagnosis: string | null;
  treatment: string | null;
  notes: string | null;
  created_at: string | null;
}

export default function PatientMedicalRecordsPage() {
  const router = useRouter();
  const [doctor, setDoctor] = useState<Doctor | null>(null);
  const [patients, setPatients] = useState<PatientAppointment[]>([]);
  
  // State qu·∫£n l√Ω tr·∫°ng th√°i t·∫£i v√† l·ªói
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const [selectedPatientId, setSelectedPatientId] = useState<number | null>(null);
  
  // State cho form t·∫°o m·ªõi
  const [diagnosis, setDiagnosis] = useState('');
  const [treatment, setTreatment] = useState('');
  const [notes, setNotes] = useState('');

  // H√†m fetch d·ªØ li·ªáu b·ªánh nh√¢n d·ª±a tr√™n ID b√°c sƒ©
  const fetchPatientData = (doctorId: number) => {
    fetch(`http://localhost:5000/api/medical-records/doctor/${doctorId}`)
      .then((res) => {
        if (!res.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b·ªánh nh√¢n.');
        return res.json();
      })
      .then((data) => {
        setPatients(data);
        setError(null);
      })
      .catch((err) => {
        setError(err.message);
        setPatients([]);
      });
  };

  // useEffect ch√≠nh ƒë·ªÉ ki·ªÉm tra ƒëƒÉng nh·∫≠p v√† t·∫£i d·ªØ li·ªáu
  useEffect(() => {
    const doctorInfoString = localStorage.getItem('user');
    
    if (!doctorInfoString) {
      // N·∫øu kh√¥ng c√≥ th√¥ng tin, chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
      router.push('/doctor/login');
      return;
    }

    try {
      const loggedInDoctor: Doctor = JSON.parse(doctorInfoString);
      setDoctor(loggedInDoctor);

      if (loggedInDoctor.account_status === 'active') {
        fetchPatientData(loggedInDoctor.id);
      }
      
    } catch (e) {
      console.error("L·ªói khi ƒë·ªçc th√¥ng tin b√°c sƒ©:", e);
      localStorage.removeItem('user'); // X√≥a d·ªØ li·ªáu h·ªèng
      router.push('/doctor/login');
    } finally {
        setIsLoading(false); // D·ª´ng loading sau khi ki·ªÉm tra xong
    }
  }, [router]); // Th√™m router v√†o dependencies

  // H√†m x·ª≠ l√Ω l∆∞u h·ªì s∆°
  const handleSaveRecord = async (appointment: PatientAppointment) => {
    if (!diagnosis || !treatment) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß Ch·∫©n ƒëo√°n v√† ƒêi·ªÅu tr·ªã.');
      return;
    }

    try {
      const response = await fetch('http://localhost:5000/api/medical-records', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          appointment_id: appointment.appointment_id,
          doctor_id: appointment.doctor_id,
          customer_id: appointment.customer_id,
          diagnosis,
          treatment,
          notes,
        }),
      });

      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.error || 'C√≥ l·ªói x·∫£y ra khi l∆∞u h·ªì s∆°.');
      }

      alert('‚úÖ ƒê√£ l∆∞u h·ªì s∆° b·ªánh √°n th√†nh c√¥ng!');
      
      setDiagnosis('');
      setTreatment('');
      setNotes('');
      
      // T·∫£i l·∫°i d·ªØ li·ªáu cho b√°c sƒ© hi·ªán t·∫°i
      if (doctor) {
        fetchPatientData(doctor.id);
      }

    } catch (err: any) {
      alert(`‚ùå L·ªói: ${err.message}`);
    }
  };
  
  // --- C√°c th√†nh ph·∫ßn UI render ---

  if (isLoading || !doctor) {
    return (
       <div className="flex min-h-screen">
        <Sidebardoctor />
        <main className="flex-1 flex items-center justify-center bg-gray-50 p-6">
            <p>ƒêang ki·ªÉm tra x√°c th·ª±c v√† t·∫£i d·ªØ li·ªáu...</p>
        </main>
      </div>
    );
  }

  if (doctor.account_status !== 'active') {
    return (
      <div className="flex h-screen font-sans bg-gray-50">
        <Sidebardoctor />
        <div className="flex-1 flex items-center justify-center p-6 text-center">
          <div className="bg-yellow-100 border border-yellow-400 text-yellow-800 px-6 py-4 rounded shadow-lg max-w-lg">
            <h2 className="text-xl font-semibold mb-2">
              {doctor.account_status === 'pending' ? '‚è≥ T√†i kho·∫£n ƒëang ch·ªù x√©t duy·ªát' : '‚ö†Ô∏è T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t'}
            </h2>
            <p>Vui l√≤ng ch·ªù qu·∫£n tr·ªã vi√™n ph√™ duy·ªát ho·∫∑c ho√†n t·∫•t h·ªì s∆° ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p ch·ª©c nƒÉng n√†y.</p>
          </div>
        </div>
      </div>
    );
  }

  // Giao di·ªán ch√≠nh khi ƒë√£ ƒëƒÉng nh·∫≠p v√† t√†i kho·∫£n active
  return (
    <div className="flex min-h-screen bg-gray-50">
      <Sidebardoctor />

      <main className="flex-1 p-6">
        <h1 className="text-3xl font-bold text-gray-800 mb-6 border-b pb-2">H·ªì S∆° B·ªánh √Ån</h1>

        {error && <p className="text-red-500 bg-red-100 p-3 rounded">{error}</p>}

        {patients.length === 0 ? (
          <p className="text-gray-600 mt-4">Hi·ªán t·∫°i kh√¥ng c√≥ b·ªánh nh√¢n n√†o ƒë√£ x√°c nh·∫≠n l·ªãch h·∫πn.</p>
        ) : (
          <div className="space-y-4">
            {patients.map((p) => (
              <div key={p.appointment_id} className="bg-white border border-gray-200 p-4 rounded-lg shadow-sm">
                <div className="flex justify-between items-center">
                    <div>
                        <h3 className="text-xl font-semibold text-blue-900">{p.patient_name}</h3>
                        <p className="text-sm text-gray-600 mt-1">üìù <span className="font-medium">L√Ω do kh√°m:</span> {p.reason}</p>
                    </div>
                    <button
                      onClick={() => setSelectedPatientId(selectedPatientId === p.appointment_id ? null : p.appointment_id)}
                      className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 text-sm font-medium"
                    >
                      {selectedPatientId === p.appointment_id ? 'ƒê√≥ng' : 'Xem / T·∫°o H·ªì S∆°'}
                    </button>
                </div>

                {selectedPatientId === p.appointment_id && (
                  <div className="mt-4 border-t border-gray-200 pt-4">
                    {!p.medical_record_id ? (
                      <div className="bg-gray-50 p-4 rounded-md">
                        <h4 className="font-semibold text-gray-800 text-lg mb-3">ü©∫ T·∫°o h·ªì s∆° b·ªánh √°n m·ªõi</h4>
                        <div className="space-y-4">
                          {/* Form fields here, same as before */}
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Ch·∫©n ƒëo√°n <span className="text-red-500">*</span></label>
                            <textarea value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)} className="w-full border-gray-300 rounded-md p-2" rows={3} placeholder="Nh·∫≠p ch·∫©n ƒëo√°n..." />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã <span className="text-red-500">*</span></label>
                            <textarea value={treatment} onChange={(e) => setTreatment(e.target.value)} className="w-full border-gray-300 rounded-md p-2" rows={3} placeholder="Nh·∫≠p h∆∞·ªõng ƒëi·ªÅu tr·ªã..." />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Ghi ch√∫ th√™m</label>
                            <textarea value={notes} onChange={(e) => setNotes(e.target.value)} className="w-full border-gray-300 rounded-md p-2" rows={2} placeholder="Ghi ch√∫ (n·∫øu c√≥)..." />
                          </div>
                          <button onClick={() => handleSaveRecord(p)} className="bg-green-600 text-white px-5 py-2 rounded-md hover:bg-green-700 font-semibold">
                            üíæ L∆∞u H·ªì S∆°
                          </button>
                        </div>
                      </div>
                    ) : (
                      <div className="bg-green-50 border border-green-300 p-4 rounded-md">
                        <h4 className="text-lg font-semibold text-green-800 mb-3">‚úÖ H·ªì s∆° b·ªánh √°n ƒë√£ ƒë∆∞·ª£c l∆∞u</h4>
                        <p><strong>Ch·∫©n ƒëo√°n:</strong> {p.diagnosis}</p>
                        <p><strong>ƒêi·ªÅu tr·ªã:</strong> {p.treatment}</p>
                        {p.notes && <p><strong>Ghi ch√∫:</strong> {p.notes}</p>}
                        <p className="text-sm text-gray-500 mt-2">üìÖ Ng√†y t·∫°o: {new Date(p.created_at!).toLocaleString('vi-VN')}</p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </main>
    </div>
  );
}