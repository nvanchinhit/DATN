'use client';

import React, { useEffect, useState, useCallback } from 'react';
import Sidebardoctor from '@/components/layout/Sidebardoctor';

// Interface kh√¥ng c·∫ßn tr∆∞·ªùng 'prescription' n·ªØa
interface PatientAppointment {
  appointment_id: number;
  patient_name: string;
  patient_email: string; 
  reason: string;
  customer_id: number;
  doctor_id: number;
  medical_record_id: number | null;
  diagnosis: string | null;
  treatment: string | null; // ƒê√¢y l√† ghi ch√∫ n·ªôi b·ªô c·ªßa b√°c sƒ©
  notes: string | null;
  created_at: string | null;
}

export default function PatientMedicalRecordsPage() {
  const [patients, setPatients] = useState<PatientAppointment[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedPatientId, setSelectedPatientId] = useState<number | null>(null);
  
  // State cho form t·∫°o h·ªì s∆°
  const [diagnosis, setDiagnosis] = useState('');
  const [treatment, setTreatment] = useState('');
  const [notes, setNotes] = useState('');

  // State M·ªöI d√†nh ri√™ng cho form so·∫°n ƒë∆°n thu·ªëc
  const [prescriptionText, setPrescriptionText] = useState('');
  const [sendingEmailId, setSendingEmailId] = useState<number | null>(null);

  const fetchPatientData = useCallback((doctorId: number) => {
    setIsLoading(true);
    fetch(`http://localhost:5000/api/medical-records/doctor/${doctorId}`)
      .then((res) => {
        if (!res.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b·ªánh nh√¢n.');
        return res.json();
      })
      .then((data) => setPatients(data))
      .catch((err) => setError(err.message))
      .finally(() => setIsLoading(false));
  }, []);

  useEffect(() => {
    const doctorInfoString = localStorage.getItem('user');
    if (doctorInfoString) {
      const loggedInDoctor = JSON.parse(doctorInfoString);
      fetchPatientData(loggedInDoctor.id);
    } else {
      setError("Kh√¥ng t√¨m th·∫•y th√¥ng tin b√°c sƒ©.");
      setIsLoading(false);
    }
  }, [fetchPatientData]);

  // H√†m l∆∞u h·ªì s∆° (ch·ªâ l∆∞u ch·∫©n ƒëo√°n v√† ghi ch√∫ ƒëi·ªÅu tr·ªã n·ªôi b·ªô)
  const handleSaveRecord = async (appointment: PatientAppointment) => {
    if (!diagnosis || !treatment) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß Ch·∫©n ƒëo√°n v√† Ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã (ghi ch√∫).');
      return;
    }
    try {
      const response = await fetch('http://localhost:5000/api/medical-records', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          appointment_id: appointment.appointment_id,
          doctor_id: appointment.doctor_id,
          customer_id: appointment.customer_id,
          diagnosis,
          treatment, // Ghi ch√∫ n·ªôi b·ªô
          notes,
        }),
      });

      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.error || 'C√≥ l·ªói x·∫£y ra khi l∆∞u h·ªì s∆°.');
      }

      alert('‚úÖ ƒê√£ l∆∞u h·ªì s∆° b·ªánh √°n th√†nh c√¥ng!');
      
      setDiagnosis('');
      setTreatment('');
      setNotes('');
      
      const doctorInfoString = localStorage.getItem('user');
      if (doctorInfoString) {
        const loggedInDoctor = JSON.parse(doctorInfoString);
        fetchPatientData(loggedInDoctor.id);
      }
    } catch (err: any) {
      alert(`‚ùå L·ªói: ${err.message}`);
    }
  };

  // H√ÄM G·ª¨I EMAIL ƒê√É C·∫¨P NH·∫¨T
  const handleSendPrescription = async (appointment: PatientAppointment) => {
    if (!prescriptionText.trim()) {
      alert('Vui l√≤ng nh·∫≠p n·ªôi dung ƒë∆°n thu·ªëc.');
      return;
    }

    setSendingEmailId(appointment.appointment_id);
    try {
      const response = await fetch(`http://localhost:5000/api/auth/medical-records/send-prescription`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          medical_record_id: appointment.medical_record_id,
          prescription_text: prescriptionText, // G·ª≠i n·ªôi dung t·ª´ form
        }),
      });

      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.msg || 'Kh√¥ng th·ªÉ g·ª≠i ƒë∆°n thu·ªëc.');
      }

      alert(`‚úÖ ƒê√£ g·ª≠i ƒë∆°n thu·ªëc th√†nh c√¥ng ƒë·∫øn email: ${appointment.patient_email}`);
      setPrescriptionText(''); // X√≥a n·ªôi dung form sau khi g·ª≠i th√†nh c√¥ng

    } catch (err: any) {
      alert(`‚ùå L·ªói khi g·ª≠i ƒë∆°n thu·ªëc: ${err.message}`);
    } finally {
      setSendingEmailId(null);
    }
  }
  
  // --- Giao di·ªán ch√≠nh ---
  return (
    <div className="flex min-h-screen bg-gray-50">
      <Sidebardoctor />
      <main className="flex-1 p-6">
        <h1 className="text-3xl font-bold text-gray-800 mb-6 border-b pb-2">H·ªì S∆° B·ªánh √Ån</h1>
        {isLoading && <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>}
        {error && <p className="text-red-500 bg-red-100 p-3 rounded">{error}</p>}
        {!isLoading && !error && (
          <div className="space-y-4">
            {patients.map((p) => (
              <div key={p.appointment_id} className="bg-white border border-gray-200 p-4 rounded-lg shadow-sm">
                <div className="flex justify-between items-center">
                  <div>
                    <h3 className="text-xl font-semibold text-blue-900">{p.patient_name}</h3>
                    <p className="text-sm text-gray-600 mt-1">üìù <span className="font-medium">L√Ω do kh√°m:</span> {p.reason}</p>
                  </div>
                  <button onClick={() => setSelectedPatientId(selectedPatientId === p.appointment_id ? null : p.appointment_id)} className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 text-sm font-medium">
                    {selectedPatientId === p.appointment_id ? 'ƒê√≥ng' : (p.medical_record_id ? 'Xem / G·ª≠i ƒê∆°n' : 'T·∫°o H·ªì S∆°')}
                  </button>
                </div>
                {selectedPatientId === p.appointment_id && (
                  <div className="mt-4 border-t border-gray-200 pt-4">
                    {!p.medical_record_id ? (
                      // FORM T·∫†O H·ªí S∆† (GHI CH√ö N·ªòI B·ªò)
                      <div className="bg-gray-50 p-4 rounded-md">
                        <h4 className="font-semibold text-gray-800 text-lg mb-3">ü©∫ T·∫°o h·ªì s∆° b·ªánh √°n</h4>
                        <div className="space-y-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Ch·∫©n ƒëo√°n <span className="text-red-500">*</span></label>
                            <textarea value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)} className="w-full border-gray-300 rounded-md p-2" rows={3} placeholder="Nh·∫≠p ch·∫©n ƒëo√°n..." />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã (Ghi ch√∫ n·ªôi b·ªô) <span className="text-red-500">*</span></label>
                            <textarea value={treatment} onChange={(e) => setTreatment(e.target.value)} className="w-full border-gray-300 rounded-md p-2" rows={3} placeholder="Ghi ch√∫ h∆∞·ªõng ƒëi·ªÅu tr·ªã cho l·∫ßn sau..." />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">Ghi ch√∫ th√™m</label>
                            <textarea value={notes} onChange={(e) => setNotes(e.target.value)} className="w-full border-gray-300 rounded-md p-2" rows={2} placeholder="Ghi ch√∫ kh√°c (n·∫øu c√≥)..." />
                          </div>
                          <button onClick={() => handleSaveRecord(p)} className="bg-green-600 text-white px-5 py-2 rounded-md hover:bg-green-700 font-semibold">üíæ L∆∞u H·ªì S∆°</button>
                        </div>
                      </div>
                    ) : (
                      // KHU V·ª∞C HI·ªÇN TH·ªä H·ªí S∆† ƒê√É L∆ØU V√Ä FORM G·ª¨I ƒê∆†N THU·ªêC
                      <div>
                        {/* 1. Hi·ªÉn th·ªã th√¥ng tin n·ªôi b·ªô ƒë√£ l∆∞u */}
                        <div className="bg-blue-50 border border-blue-300 p-4 rounded-md mb-4">
                          <h4 className="text-lg font-semibold text-blue-800 mb-3">üìÑ Th√¥ng tin h·ªì s∆° ƒë√£ l∆∞u</h4>
                          <p><strong>Ch·∫©n ƒëo√°n:</strong> {p.diagnosis}</p>
                          <p><strong>Ghi ch√∫ ƒëi·ªÅu tr·ªã (N·ªôi b·ªô):</strong> {p.treatment}</p>
                          {p.notes && <p><strong>Ghi ch√∫ th√™m:</strong> {p.notes}</p>}
                        </div>

                        {/* 2. Form so·∫°n v√† g·ª≠i ƒë∆°n thu·ªëc */}
                        <div className="bg-green-50 border border-green-300 p-4 rounded-md">
                          <h4 className="text-lg font-semibold text-green-800 mb-3">üìß So·∫°n v√† G·ª≠i ƒê∆°n Thu·ªëc cho B·ªánh nh√¢n</h4>
                          <div className="space-y-3">
                            <label htmlFor={`prescription-${p.appointment_id}`} className="block text-sm font-medium text-gray-700">N·ªôi dung ƒë∆°n thu·ªëc</label>
                            <textarea
                              id={`prescription-${p.appointment_id}`}
                              value={prescriptionText}
                              onChange={(e) => setPrescriptionText(e.target.value)}
                              className="w-full border-gray-300 rounded-md p-2"
                              rows={5}
                              placeholder="V√≠ d·ª•:
1. Paracetamol 500mg (20 vi√™n)
   - U·ªëng 1 vi√™n sau khi ƒÉn, 3 l·∫ßn/ng√†y.
2. Amoxicillin 500mg (14 vi√™n)
   - U·ªëng 1 vi√™n sau khi ƒÉn, 2 l·∫ßn/ng√†y."
                            />
                            <button
                              onClick={() => handleSendPrescription(p)}
                              disabled={sendingEmailId === p.appointment_id}
                              className="bg-sky-600 text-white px-5 py-2 rounded-md hover:bg-sky-700 font-semibold text-sm disabled:bg-gray-400 disabled:cursor-not-allowed"
                            >
                              {sendingEmailId === p.appointment_id ? 'ƒêang g·ª≠i...' : 'G·ª≠i ƒê∆°n Thu·ªëc Qua Email'}
                            </button>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </main>
    </div>
  );
}